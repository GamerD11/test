if not game:IsLoaded() then
game.Loaded:Wait()
end

local analyzers = {
    DisableHttpReq = false,
    DisableFileReq = true,
    DisableWebhookReq = true,
    DisableJSONEncode = true,
    DisableJSONDecode = true,
    DisableWebSocket = false,
    DisableBlockTeleport = true
}

local logger = {
    LogHttpReq = true,
    LogFileReq = true,
    LogWebhookReq = true,
    LogJSONEncode = true,
    LogJSONDecode = true,
    LogWebSocket = true,
    LogTeleport = true
}

local BlacklistedPatterns = {
    "webhook",
    "httpbin",
    "ip%-api%.com",
    "v4%.ident%.me",
    "127%.0%.0%.1%:",
    "192%.168%.",
    "localhost%:",
    "ipapi",
    "ipify"
}


local OriginalHookMetamethod = clonefunction(getgenv().hookmetamethod)


local RbxAnalyticsService = cloneref(game:GetService("RbxAnalyticsService"))
local LogService = cloneref(game:GetService("LogService"))
local TeleportService = cloneref(game:GetService("TeleportService"))
local HttpService = cloneref(game:GetService("HttpService"))
local UGCValidationService = cloneref(game:GetService("UGCValidationService"))

local TextChatref = cloneref(game:GetService("TextChatService"))
local TextChat = TextChatref:FindFirstChild("TextChannels") and TextChatref.TextChannels:FindFirstChild("RBXGeneral")

local ReplicatedStorage = cloneref(game:GetService("ReplicatedStorage"))
local ChatRemote = ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents") and ReplicatedStorage.DefaultChatSystemChatEvents:FindFirstChild("SayMessageRequest")

local InsertService = cloneref(game:GetService("InsertService"))

local oldIndex;
oldIndex = OriginalHookMetamethod(game, "__index", newcclosure(function(self, index)
    ---------------------------------------------------
    if self == TextChat and index == "SendAsync" then
        return function(_, ...)
            return TextChat:SendAsync(...)
        end

    elseif self == ChatRemote and index == "FireServer" then
        return function(_, ...)
            return ChatRemote:FireServer(...)
        end
    --------------
    elseif self == UGCValidationService and index == "FetchAssetWithFormat" then
        return function(_, ...)
            return UGCValidationService:FetchAssetWithFormat(...)
        end
    -----------------------------------------
    elseif self == InsertService and index == "LoadLocalAsset" then
        return function(_, ...)
            return InsertService:LoadLocalAsset(...)
        end

    elseif self == game and index == "GetObjects" then
        return function(_, ...)
            return game:GetObjects(...)
        end

    elseif self == LogService and index == "GetHttpResultHistory" then
        return function(_, ...)
            return LogService:GetHttpResultHistory(...)
        end

    elseif self == RbxAnalyticsService and index == "GetClientId" then
        return function(_, ...)
            return RbxAnalyticsService:GetClientId(...)
        end
	-------------------------------------- TeleportService

	elseif index == "Teleport" then
			return function(_, ...)
				return TeleportService:Teleport(...)
			end
	elseif index == "TeleportAsync" then
			return function(_, ...)
				return TeleportService:TeleportAsync(...)
			end
	elseif index == "TeleportPartyAsync" then
			return function(_, ...)
				return TeleportService:TeleportPartyAsync(...)
			end
	elseif index == "TeleportToPlaceInstance" then
			return function(_, ...)
				return TeleportService:TeleportToPlaceInstance(...)
			end
	elseif index == "TeleportToPrivateServer" then
			return function(_, ...)
				return TeleportService:TeleportToPrivateServer(...)
			end
	elseif index == "TeleportToSpawnByName" then
			return function(_, ...)
				return TeleportService:TeleportToSpawnByName(...)
			end

    -----------------------------------------
    elseif self == game and index == "RequestInternal" then
        return function(_, ...)
            return game:HttpGet(...)
        end
    elseif self == game and index == "HttpGet" then
        return function(_, ...)
            return game:HttpGet(...)
        end
    elseif self == game and index == "HttpGetAsync" then
        return function(_, ...)
            return game:HttpGetAsync(...)
        end
    elseif self == game and index == "HttpPost" then
        return function(_, ...)
            return game:HttpPost(...)
        end
    elseif self == game and index == "HttpPostAsync" then
        return function(_, ...)
            return game:HttpPostAsync(...)
        end
    elseif self == game and index == "GetAsync" then
        return function(_, ...)
            return game:GetAsync(...)
        end
    elseif self == game and index == "PostAsync" then
        return function(_, ...)
            return game:PostAsync(...)
        end
    elseif self == game and index == "RequestAsync" then
        return function(_, ...)
            return game:RequestAsync(...)
        end
    elseif self == game and index == "request" then
        return function(_, ...)
            return game:request(...)
        end
    elseif self == game and index == "JSONEncode" then
        return function(_, ...)
            return game:JSONEncode(...)
        end
    elseif self == game and index == "JSONDecode" then
        return function(_, ...)
            return game:JSONDecode(...)
        end

    -------------------------------------
    elseif self == HttpService and index == "RequestInternal" then
        return function(_, ...)
            return HttpService:RequestInternal(...)
        end
    elseif self == HttpService and index == "HttpGet" then
        return function(_, ...)
            return HttpService:HttpGet(...)
        end
    elseif self == HttpService and index == "HttpGetAsync" then
        return function(_, ...)
            return HttpService:HttpGetAsync(...)
        end
    elseif self == HttpService and index == "HttpPost" then
        return function(_, ...)
            return HttpService:HttpPost(...)
        end
    elseif self == HttpService and index == "HttpPostAsync" then
        return function(_, ...)
            return HttpService:HttpPostAsync(...)
        end
    elseif self == HttpService and index == "GetAsync" then
        return function(_, ...)
            return HttpService:GetAsync(...)
        end
    elseif self == HttpService and index == "PostAsync" then
        return function(_, ...)
            return HttpService:PostAsync(...)
        end
    elseif self == HttpService and index == "RequestAsync" then
        return function(_, ...)
            return HttpService:RequestAsync(...)
        end
    elseif self == HttpService and index == "request" then
        return function(_, ...)
            return HttpService:request(...)
        end
    elseif self == HttpService and index == "JSONEncode" then
        return function(_, ...)
            return HttpService:JSONEncode(...)
        end
    elseif self == HttpService and index == "JSONDecode" then
        return function(_, ...)
            return HttpService:JSONDecode(...)
        end
    end
    return oldIndex(self, index)
end))






local outputConsole
local ScreenGui


local UserInputService = cloneref(game:GetService("UserInputService"))


local function write(a)
    if outputConsole then
        outputConsole.Text = outputConsole.Text .. tostring(a).. "\n"
        outputConsole.CursorPosition = #outputConsole.Text + 1
    else
        print(a)
    end
end

local function writew(a)
    write("\n[!] " .. a)
end

local function writee(a)
    write("[ERROR] " .. a)
end


local function createConsole()
    ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Parent = gethui() or cloneref(game:GetService("CoreGui"))


    consoleFrame3 = Instance.new("Frame")
    consoleFrame3.Size = UDim2.new(0.5, 0, 0.6, 0)
    consoleFrame3.Position = UDim2.new(0.25, 0, 0.3, 0)
    consoleFrame3.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    consoleFrame3.BorderSizePixel = 0
    consoleFrame3.Active = true
    consoleFrame3.Draggable = true
    consoleFrame3.Parent = ScreenGui


    local buttonContainer = Instance.new("Frame")
    buttonContainer.Size = UDim2.new(1, -20, 0, 40)
    buttonContainer.Position = UDim2.new(0, 10, 1, -50)
    buttonContainer.BackgroundTransparency = 1
    buttonContainer.Parent = consoleFrame3



    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = consoleFrame3


    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(30, 30, 30)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(50, 50, 50))
    }
    gradient.Rotation = 90
    gradient.Parent = consoleFrame3


    local scrollFrame = Instance.new("ScrollingFrame")
    scrollFrame.Size = UDim2.new(1, -20, 1, -80)
    scrollFrame.Position = UDim2.new(0, 10, 0, 25)
    scrollFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    scrollFrame.ScrollBarThickness = 8
    scrollFrame.CanvasSize = UDim2.new(0, 0, 30, 0)
    scrollFrame.Parent = consoleFrame3

    local scrollCorner = Instance.new("UICorner")
    scrollCorner.CornerRadius = UDim.new(0, 8)
    scrollCorner.Parent = scrollFrame

    outputConsole = Instance.new("TextBox")
    outputConsole.Size = UDim2.new(1, -100, 1, 10)
    outputConsole.Position = UDim2.new(0, 50, 0, 10)
    outputConsole.BackgroundTransparency = 1
    outputConsole.TextColor3 = Color3.fromRGB(255, 255, 255)
    outputConsole.Font = Enum.Font.Code
    outputConsole.TextSize = 14
    outputConsole.ClearTextOnFocus = false
    outputConsole.MultiLine = true
    outputConsole.TextWrapped = true
    outputConsole.Text = ""
    outputConsole.TextXAlignment = Enum.TextXAlignment.Left
    outputConsole.TextYAlignment = Enum.TextYAlignment.Top
    outputConsole.TextEditable = false
    outputConsole.Parent = scrollFrame


    local buttonContainer = Instance.new("Frame")
    buttonContainer.Size = UDim2.new(1, -20, 0, 30)
    buttonContainer.Position = UDim2.new(0, 10, 1, -50)
    buttonContainer.BackgroundTransparency = 1
    buttonContainer.Parent = consoleFrame3

    local message = Instance.new("TextButton")
    message.Position = UDim2.new(.15, -100, .014, 5)
    message.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    message.TextColor3 = Color3.fromRGB(255, 255, 255)
    message.Text = "HTTP SPY"
    message.Font = Enum.Font.SourceSansBold
    message.TextSize = 18
    message.Parent = consoleFrame3


local function createButton2(text, color, onClick)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0.1, -4, .50, 0)
    button.BackgroundColor3 = color
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.Text = text
    button.Font = Enum.Font.SourceSansBold
    button.TextSize = 12
    button.AutoButtonColor = true
    button.Parent = buttonContainer

    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(10, 8)
    buttonCorner.Parent = button

    button.MouseButton1Click:Connect(onClick)
    return button
end


local function createButton(text, color, onClick, toggleName, toggleType)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0.1, -4, 0.50, 0)
    button.BackgroundColor3 = color
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.Text = text
    button.Font = Enum.Font.SourceSansBold
    button.TextSize = 12
    button.AutoButtonColor = true
    button.Parent = buttonContainer

    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 8)
    buttonCorner.Parent = button

    -- Status label
    local statusLabel = Instance.new("TextLabel")
    statusLabel.Size = UDim2.new(1, 0, 0.5, 0)
    statusLabel.Position = UDim2.new(0, 0, 0.8, 5)
    statusLabel.BackgroundTransparency = 1
    statusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    statusLabel.Font = Enum.Font.SourceSans
    statusLabel.TextSize = 12
    statusLabel.Parent = button

    -- Check initial status and update the label
    local initialStatus = (toggleType == "analyzers" and analyzers[toggleName]) or
                          (toggleType == "logger" and logger[toggleName])
    statusLabel.Text = initialStatus and "ON" or "OFF"

    -- Update status label on click
    button.MouseButton1Click:Connect(function()
        onClick()
        local currentStatus = (toggleType == "analyzers" and analyzers[toggleName]) or
                              (toggleType == "logger" and logger[toggleName])
        statusLabel.Text = currentStatus and "ON" or "OFF"
    end)

    return button
end






local isMinimal = false
local closeButton


createButton2("Toggle Minimal", Color3.fromRGB(100, 100, 255), function()
    isMinimal = not isMinimal
    local frame = ScreenGui:FindFirstChild("Frame")

    if isMinimal then
        -- Minimize GUI
        frame.Size = UDim2.new(0.3, 0, 0.1, 0)
        frame.Position = UDim2.new(0.35, 0, 0.45, 0)
        closeButton.Position = UDim2.new(1, -40, -1.34, -20)
    else
        -- Restore GUI
        frame.Size = UDim2.new(0.5, 0, 0.6, 0)
        frame.Position = UDim2.new(0.25, 0, 0.3, 0)
        closeButton.Position = UDim2.new(0.92, 1.5, -18.5, 15)
    end
end).Position = UDim2.new(0, 0, .9, 0)


closeButton = createButton2("Close", Color3.fromRGB(0, 200, 0), function()
    ScreenGui:Destroy()
end)
closeButton.Position = UDim2.new(0.92, 1.5, -18.5, 15)


createButton2("Clear", Color3.fromRGB(200, 0, 0), function()
    outputConsole.Text = ""
end).Position = UDim2.new(0, 0, 0, 0)


createButton("Block WebSocket", Color3.fromRGB(128, 0, 128), function()
    analyzers.DisableWebSocket = not analyzers.DisableWebSocket
    writew(analyzers.DisableWebSocket and "WebSocket blocking enabled." or "WebSocket blocking disabled.")
end, "DisableWebSocket", "analyzers").Position = UDim2.new(.54, 0, 0, 0)

createButton("Block File Operations", Color3.fromRGB(128, 0, 128), function()
    analyzers.DisableFileReq = not analyzers.DisableFileReq
    writew(analyzers.DisableFileReq and "File operation blocking enabled." or "File operation blocking disabled.")
end, "DisableFileReq", "analyzers").Position = UDim2.new(.42, 0, 0, 0)

createButton("Block HTTP Requests", Color3.fromRGB(128, 0, 128), function()
    analyzers.DisableHttpReq = not analyzers.DisableHttpReq
    writew(analyzers.DisableHttpReq and "HTTP request blocking enabled." or "HTTP request blocking disabled.")
end, "DisableHttpReq", "analyzers").Position = UDim2.new(0.30, 0, 0, 0)

createButton("Block JSON-Encode", Color3.fromRGB(128, 0, 128), function()
    analyzers.DisableJSONEncode = not analyzers.DisableJSONEncode
    writew(analyzers.DisableJSONEncode and "JSONEncode blocking enabled." or "JSONEncode blocking disabled.")
end, "DisableJSONEncode", "analyzers").Position = UDim2.new(0.66, 0, 0, 0)

createButton("Block JSON-Decode", Color3.fromRGB(128, 0, 128), function()
    analyzers.DisableJSONDecode = not analyzers.DisableJSONDecode
    writew(analyzers.DisableJSONDecode and "JSON-Decode blocking enabled." or "JSON-Decode blocking disabled.")
end, "DisableJSONDecode", "analyzers").Position = UDim2.new(0.78, 0, 0, 0)

createButton("Block Webhooks", Color3.fromRGB(128, 0, 128), function()
    analyzers.DisableWebhookReq = not analyzers.DisableWebhookReq
    writew(analyzers.DisableWebhookReq and "Webhook blocking enabled." or "Webhook blocking disabled.")
end, "DisableWebhookReq", "analyzers").Position = UDim2.new(0.90, 0, 0, 0)

createButton("Block Teleport", Color3.fromRGB(128, 0, 128), function()
    analyzers.DisableBlockTeleport = not analyzers.DisableBlockTeleport
    writew(analyzers.DisableBlockTeleport and "DisableBlockTeleports enabled." or "DisableBlockTeleports disabled.")
end, "DisableBlockTeleport", "analyzers").Position = UDim2.new(.18, 0, .9, 0)


---------


createButton("Log WebSocket", Color3.fromRGB(128, 0, 128), function()
    logger.LogWebSocket = not logger.LogWebSocket
    writew(logger.LogWebSocket and "WebSocket Logging enabled." or "WebSocket Logging disabled.")
end, "LogWebSocket", "logger").Position = UDim2.new(.54, 0, .9, 0)

createButton("Log FileOps", Color3.fromRGB(128, 0, 128), function()
    logger.LogFileReq = not logger.LogFileReq
    writew(logger.LogFileReq and "File operation Logging enabled." or "File operation Logging disabled.")
end, "LogFileReq", "logger").Position = UDim2.new(.42, 0, .9, 0)

createButton("Log HTTP", Color3.fromRGB(128, 0, 128), function()
    logger.LogHttpReq = not logger.LogHttpReq
    writew(logger.LogHttpReq and "HTTP request Logging enabled." or "HTTP request Logging disabled.")
end, "LogHttpReq", "logger").Position = UDim2.new(0.30, 0, .9, 0)

createButton("Log JSON Encode", Color3.fromRGB(128, 0, 128), function()
    logger.LogJSONEncode = not logger.LogJSONEncode
    writew(logger.LogJSONEncode and "JSONEncode Logging enabled." or "JSONEncode Logging disabled.")
end, "LogJSONEncode", "logger").Position = UDim2.new(0.66, 0, .9, 0)

createButton("Log JSON Decode", Color3.fromRGB(128, 0, 128), function()
    logger.LogJSONDecode = not logger.LogJSONDecode
    writew(logger.LogJSONDecode and "JSON-Decode Logging enabled." or "JSON-Decode Logging disabled.")
end, "LogJSONDecode", "logger").Position = UDim2.new(0.78, 0, .9, 0)

createButton("Log Webhooks", Color3.fromRGB(128, 0, 128), function()
    logger.LogWebhookReq = not logger.LogWebhookReq
    writew(logger.LogWebhookReq and "Webhook Logging enabled." or "Webhook Logging disabled.")
end, "LogWebhookReq", "logger").Position = UDim2.new(0.90, 0, .9, 0)

end


createConsole()


local function makeDraggable(frame)
    local dragging = false
    local dragInput, dragStart, startPos

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)
end

makeDraggable(consoleFrame3)


local oldDelFile = clonefunction(getgenv().delfile)
local oldWriteFile = clonefunction(getgenv().writefile)
local oldReadFile = clonefunction(getgenv().readfile)
local oldAppendFile = clonefunction(getgenv().appendfile)
local oldMakeFolder = clonefunction(getgenv().makefolder)
local oldListFiles = clonefunction(getgenv().listfiles)
local oldIsFile = clonefunction(getgenv().isfile)
local oldloadfile = clonefunction(getgenv().loadfile)
local oldIsFolder = clonefunction(getgenv().isfolder)
local oldDelFolder = clonefunction(getgenv().delfolder)


local function fileOperationHook()


    rawset(getgenv(), "loadfile", function(folderPath)
        if analyzers.DisableFileReq and logger.LogFileReq then
            writew("Blocked LoadFile: \n" .. folderPath)
            return true
        elseif not analyzers.DisableFileReq and logger.LogFileReq then
            writew("LoadFile Called: \n" .. folderPath)
            return oldloadfile(folderPath)
        elseif not analyzers.DisableFileReq and not logger.LogFileReq then
            return oldloadfile(folderPath)
        elseif analyzers.DisableFileReq and not logger.LogFileReq then
            return true
        end
    end)

    rawset(getgenv(), "isfolder", function(folderPath)
        if logger.LogFileReq then
            writew("IsFolder Called: \n" .. folderPath)
            return oldIsFolder(folderPath)
        else
            return oldIsFolder(folderPath)
        end
    end)

    rawset(getgenv(), "delfolder", function(folderPath)
        if analyzers.DisableFileReq and logger.LogFileReq then
            writew("Blocked DelFolder: \n" .. folderPath)
            return true
        elseif not analyzers.DisableFileReq and logger.LogFileReq then
            writew("DelFolder Called: \n" .. folderPath)
            return oldDelFolder(folderPath)
        elseif not analyzers.DisableFileReq and not logger.LogFileReq then
            return oldDelFolder(folderPath)
        elseif analyzers.DisableFileReq and not logger.LogFileReq then
            return true
        end
    end)

    rawset(getgenv(), "delfile", function(fileName)
        if analyzers.DisableFileReq and logger.LogFileReq then
            writew("Blocked DelFile: \n" .. fileName)
            return true
        elseif not analyzers.DisableFileReq and logger.LogFileReq then
            writew("DelFile Called: \n" .. fileName)
            return oldDelFile(fileName)
        elseif not analyzers.DisableFileReq and not logger.LogFileReq then
            return oldDelFile(fileName)
        elseif analyzers.DisableFileReq and not logger.LogFileReq then
            return true
        end
    end)



rawset(getgenv(), "readfile", function(fileName)
    if analyzers.DisableFileReq and logger.LogFileReq then
        writew("Blocked ReadFile: \n" .. fileName)
        return true
    elseif not analyzers.DisableFileReq and logger.LogFileReq then
        writew("ReadFile Called: \n" .. fileName)
        return oldReadFile(fileName)
    elseif not analyzers.DisableFileReq and not logger.LogFileReq then
        return oldReadFile(fileName)
    elseif analyzers.DisableFileReq and not logger.LogFileReq then
        return true
    end
end)


rawset(getgenv(), "writefile", function(fileName, content)
    local maxLength = 1000

    -- Enforce maximum character length on content
    if content and #content > maxLength then
        content = content:sub(1, maxLength) .. "\n ** MAX *CHARACTER LIMT **"
    end

    if analyzers.DisableFileReq and logger.LogFileReq then
        writew("Blocked WriteFile: \n" .. fileName .. "\n")
        write((content or "nil"))
        write("\n---------------------------------")
        return
    elseif not analyzers.DisableFileReq and logger.LogFileReq then
        writew("WriteFile Called: \n" .. fileName .. "\n")
        write((content or "nil"))
        write("\n---------------------------------")
        return oldWriteFile(fileName, content)
    elseif not analyzers.DisableFileReq and not logger.LogFileReq then
        return oldWriteFile(fileName, content)
    elseif analyzers.DisableFileReq and not logger.LogFileReq then
        return
    end
end)





rawset(getgenv(), "appendfile", function(fileName, content)
    local maxLength = 1000

    if analyzers.DisableFileReq and logger.LogFileReq then
        if content and #content > maxLength then
            content = content:sub(1, maxLength) .. "\n ** MAX *CHARACTER LIMT **"
        end
        writew("Blocked AppendFile:\n " .. fileName .. "\n")
        write("Body: " .. (content or "nil"))
        write("\n---------------------------------")
        return
    elseif not analyzers.DisableFileReq and logger.LogFileReq then
        if content and #content > maxLength then
            content = content:sub(1, maxLength) .. "\n ** MAX *CHARACTER LIMT **"
        end
        writew("AppendFile Called: \n" .. fileName .. "\n")
        write("Body: " .. (content or "nil"))
        write("\n---------------------------------")
        return oldAppendFile(fileName, content)
    elseif not analyzers.DisableFileReq and not logger.LogFileReq then
        return oldAppendFile(fileName, content)
    elseif analyzers.DisableFileReq and not logger.LogFileReq then
        return
    end
end)


rawset(getgenv(), "makefolder", function(folderPath)
    if logger.LogFileReq then
        writew("MakeFolder Called: \n" .. folderPath)
        return oldMakeFolder(folderPath)
    else
        return oldMakeFolder(folderPath)
    end
end)

rawset(getgenv(), "listfiles", function(folderPath)
    if logger.LogFileReq then
        writew("ListFiles Called: \n" .. folderPath)
        return oldListFiles(folderPath)
    else
        return oldListFiles(folderPath)
    end
end)

rawset(getgenv(), "isfile", function(filePath)
    if logger.LogFileReq then
        writew("IsFile Called: \n" .. filePath)
        return oldIsFile(filePath)
    else
        return oldIsFile(filePath)
    end
end)

end


fileOperationHook()

local function printTable(table, indent)
    indent = indent or 0
    for key, value in pairs(table) do
        local formattedKey = tostring(key)
        if type(value) == "table" then
            write(string.rep(" ", indent) .. formattedKey .. ": {")
            printTable(value, indent + 4)  -- Recursive call to print nested tables
            write(string.rep(" ", indent) .. "}")
        else
            write(string.rep(" ", indent) .. formattedKey .. ": " .. tostring(value))
        end
    end
end



local oldHttpRequest
oldHttpRequest = OriginalHookMetamethod(game, "__namecall", function(self, ...)
    local method = getnamecallmethod()
    local arguments = {...}

    local url = tostring(arguments[1] or "Unknown URL")
    local body = tostring(arguments[2] or "No body")
	local arg3 = tostring(arguments[3] or "No body")
	local arg4 = tostring(arguments[4] or "No body")

    if method == "HttpGet" or method == "HttpGetAsync" or method == "HttpPost" or 
       method == "HttpPostAsync" or method == "GetAsync" or method == "PostAsync" or 
       method == "RequestAsync" or method == "request" or method == "RequestInternal" then

        if analyzers.DisableHttpReq and logger.LogHttpReq then
            writew("Blocked HTTP Request [ __Namecall ]")
        if typeof(url) == "table" then
            printTable(url, 7)
            write(body)
            write("\n--------------------------")
        else
            write(url)
            write(body)
            write("\n--------------------------")
        end
            return
        elseif not analyzers.DisableHttpReq and logger.LogHttpReq then
            for _, pattern in ipairs(BlacklistedPatterns) do
                if url:match(pattern) then
                    if analyzers.DisableWebhookReq and logger.LogWebhookReq then
                        writew("Blocked BlackListed Request [ __Namecall ]")
                        write(url)
                        writee(body)
                        return
                    elseif not analyzers.DisableWebhookReq and logger.LogWebhookReq and not logger.LogHttpReq then
                        writew("Blacklisted Request Sent [ __Namecall ]")
                        write(url)
                        write(body)
                        return oldHttpRequest(self, ...)
                    elseif not analyzers.DisableWebhookReq and logger.LogWebhookReq and logger.LogHttpReq then
                        writew("Blacklisted Request Sent [ __Namecall ]")
                        write(url)
                        write(body)
                        return oldHttpRequest(self, ...)
                    elseif not analyzers.DisableWebhookReq and not logger.LogWebhookReq and logger.LogHttpReq then
                        writew("HTTP called [ __Namecall ]")
                        write(url)
                        write(body)
                        return oldHttpRequest(self, ...)
                    elseif analyzers.DisableWebhookReq and not logger.LogWebhookReq and not logger.LogHttpReq then
                        return
                    end
                end
            end
	    writew("HTTP called [ __Namecall ]")
        if typeof(url) == "table" then
            printTable(url, 7)
            write(body)
        else
            write(url)
            write(body)
        end
            return oldHttpRequest(self, ...)
        elseif not analyzers.DisableHttpReq and not logger.LogHttpReq then
            for _, pattern in ipairs(BlacklistedPatterns) do
                if url:match(pattern) then
                    if analyzers.DisableWebhookReq and logger.LogWebhookReq then
                        writee("Blocked Blacklisted Request [ __Namecall ]")
                        write(url)
                        writee(body)
                        return
                    elseif not analyzers.DisableWebhookReq and logger.LogWebhookReq and not logger.LogHttpReq then
                        writew("Blacklisted Request Sent [ __Namecall ]")
                        write(url)
                        write(body)
                        return oldHttpRequest(self, ...)
                    elseif not analyzers.DisableWebhookReq and not logger.LogWebhookReq and not logger.LogHttpReq then
                        return oldHttpRequest(self, ...)
                    elseif analyzers.DisableWebhookReq and not logger.LogWebhookReq then
                        return
                    end
                end
            end
            return oldHttpRequest(self, ...)
        elseif analyzers.DisableHttpReq and not logger.LogHttpReq then
            return
        end
    end

    if method == "JSONEncode" then
        local jsonInput = arguments[1]

        if analyzers.DisableJSONEncode and logger.LogJSONEncode then
            writew("------------- Blocked JSON Encode -------------\n")
            if type(jsonInput) == "table" then
                write(url)
                printTable(jsonInput, 4)
            else
                write(url)
                write(tostring(jsonInput))
            end
            return
        elseif not analyzers.DisableJSONEncode and logger.LogJSONEncode then
            write("\n------------- JSON Encode -------------\n")
            write(url)
            if type(jsonInput) == "table" then
                printTable(jsonInput, 4)
            else
                write(tostring(jsonInput))
            end
            return oldHttpRequest(self, ...)
        elseif not analyzers.DisableJSONEncode and not logger.LogJSONEncode then
            return oldHttpRequest(self, ...)
        elseif analyzers.DisableJSONEncode and not logger.LogJSONEncode then
            return
        end

    elseif method == "JSONDecode" then
        local jsonInput = arguments[1]

        if analyzers.DisableJSONDecode and logger.LogJSONDecode then
            writew("------------- Blocked JSON Decode -------------\n")
            if type(jsonInput) == "table" then
                write(url)
                printTable(jsonInput, 4)
                write("\n--------------------------")
            else
                write(url)
                write(tostring(jsonInput))
                write("\n--------------------------")
            end
            return
        elseif not analyzers.DisableJSONDecode and logger.LogJSONDecode then
            write("\n------------- JSON Decode -------------\n")
            write(url)
            if type(jsonInput) == "table" then
                printTable(jsonInput, 4)
            else
                write(tostring(jsonInput))
            end
            write("\n--------------------------")
            return oldHttpRequest(self, ...)
        elseif not analyzers.DisableJSONDecode and not logger.LogJSONDecode then
            return oldHttpRequest(self, ...)
        elseif analyzers.DisableJSONDecode and not logger.LogJSONDecode then
            return
        end

    elseif method == "ReportAbuse()"  then
        writew("------------- Blocked ReportAbuse() -------------\n")
        write(url)
        return

    elseif method == "GetClientId" or method == "GetHttpResultHistory" then
        writew("------------- Blocked ".. method .."() -------------\n")
        return

    elseif method == "GetObjects"  then
        if analyzers.DisableHttpReq and logger.LogHttpReq then
            writew("------------- Blocked GetObjects() -------------\n")
            write(url)
            return
        elseif not analyzers.DisableHttpReq and logger.LogHttpReq then
            writew("------------- GetObjects() -------------\n")
            write(url)
            return oldHttpRequest(self, ...)
        elseif not analyzers.DisableHttpReq and not logger.LogHttpReq then
            return oldHttpRequest(self, ...)
        elseif analyzers.DisableHttpReq and not logger.LogHttpReq then
            return
        end

    elseif method == "LoadLocalAsset" then
        if analyzers.DisableHttpReq and logger.LogHttpReq then
            writew("------------- Blocked LoadLocalAsset() -------------\n")
            write(url)
            return
        elseif not analyzers.DisableHttpReq and logger.LogHttpReq then
            writew("------------- LoadLocalAsset() -------------\n")
            write(url)
            return oldHttpRequest(self, ...)
        elseif not analyzers.DisableHttpReq and not logger.LogHttpReq then
            return oldHttpRequest(self, ...)
        elseif analyzers.DisableHttpReq and not logger.LogHttpReq then
            return
        end


    elseif method == "FetchAssetWithFormat" then
        local jsonInput = arguments[1]

        if analyzers.DisableJSONDecode and logger.LogJSONDecode then
            writew("------------- Blocked FetchAssetWithFormat() -------------\n")
            if type(jsonInput) == "table" then
                write(url)
                printTable(jsonInput, 4)
                write("\n--------------------------")
            else
                write(url)
                write(tostring(jsonInput))
                write("\n--------------------------")
            end
            return
        elseif not analyzers.DisableJSONDecode and logger.LogJSONDecode then
            write("\n------------- FetchAssetWithFormat() -------------\n")
            write(url)
            if type(jsonInput) == "table" then
                printTable(jsonInput, 4)
            else
                write(tostring(jsonInput))
            end
            write("\n--------------------------")
            return oldHttpRequest(self, ...)
        elseif not analyzers.DisableJSONDecode and not logger.LogJSONDecode then
            return oldHttpRequest(self, ...)
        elseif analyzers.DisableJSONDecode and not logger.LogJSONDecode then
            return
        end

    elseif method == "SendAsync" or (method == "FireServer" and self.Name == "SayMessageRequest") then
        if checkcaller() then
            writew("------------- Blocked Chat Message -------------\n")
            write(url)
            return
        end

	

    elseif method == "Teleport" or method == "TeleportAsync" or method == "TeleportPartyAsync" 
        or method == "TeleportToPlaceInstance" or method == "TeleportToPrivateServer" or method == "TeleportToSpawnByName" then
            if analyzers.DisableBlockTeleport then
                if checkcaller() then
                    writew("------------- Blocked Teleport -------------\n")
                    local args = {...}
                    for i, arg in ipairs(args) do
                        write(i .. tostring(arg))
                    end
                    write("--------------------------\n")
                    return
                end
            end
        end



    return oldHttpRequest(self, ...)
end)


---- getgenv().request
if getgenv().request then
local oldRequest = clonefunction(getgenv().request)

rawset(getgenv(), "request", function(requestArgs)
    local url = requestArgs.Url or "Unknown URL"
    local body = requestArgs.Body or "No body\n"

    if analyzers.DisableHttpReq and logger.LogHttpReq then
        writew("Blocked HTTP Request [ __Namecall ]")
        if typeof(url) == "table" then
            printTable(url, 7)
            write(body)
            write("\n--------------------------")
        else
            write(url)
            write(body)
            write("\n--------------------------")
        end
        return
    elseif not analyzers.DisableHttpReq and logger.LogHttpReq then
        for _, pattern in ipairs(BlacklistedPatterns) do
            if url:match(pattern) then
                if analyzers.DisableWebhookReq and logger.LogWebhookReq then
                    writew("Blocked BlackListed Request [getgenv]")
                    write(url)
                    write(body)
                    write("\n--------------------------")
                    return
                elseif not analyzers.DisableWebhookReq and logger.LogWebhookReq and not logger.LogHttpReq then
                    writew("Blacklisted Request [getgenv]")
                    write(url)
                    write(body)
                    write("\n--------------------------")
                    return oldRequest(requestArgs)
                elseif not analyzers.DisableWebhookReq and logger.LogWebhookReq and logger.LogHttpReq then
                    writew("Blacklisted Request [getgenv]")
                    write(url)
                    write(body)
                    write("\n--------------------------")
                    return oldRequest(requestArgs)
                elseif not analyzers.DisableWebhookReq and not logger.LogWebhookReq and logger.LogHttpReq then
                    writew("HTTP called [getgenv]")
                    write(url)
                    write(body)
                    write("\n--------------------------")
                    return oldRequest(requestArgs)
                elseif analyzers.DisableWebhookReq and not logger.LogWebhookReq and not logger.LogHttpReq then
                    return
                end
            end
        end
	    writew("HTTP called [ request ]")
        if typeof(url) == "table" then
            printTable(url, 7)
            write(body)
            write("\n--------------------------")
        else
            write(url)
            write(body)
            write("\n--------------------------")
        end
        return oldRequest(requestArgs)
    elseif not analyzers.DisableHttpReq and not logger.LogHttpReq then
        for _, pattern in ipairs(BlacklistedPatterns) do
            if url:match(pattern) then
                if analyzers.DisableWebhookReq and logger.LogWebhookReq then
                    writee("Blocked BlackListed Request [getgenv]")
                    write(url)
                    write(body)
                    write("\n--------------------------")
                    return
                elseif not analyzers.DisableWebhookReq and logger.LogWebhookReq and not logger.LogHttpReq then
                    writew("Blacklisted Request called [getgenv]")
                    write(url)
                    write(body)
                    write("\n--------------------------")
                    return oldRequest(requestArgs)
                elseif not analyzers.DisableWebhookReq and not logger.LogWebhookReq and not logger.LogHttpReq then
                    return oldRequest(requestArgs)
                elseif analyzers.DisableWebhookReq and not logger.LogWebhookReq then
                    return
                end
            end
        end
        return oldRequest(requestArgs)
    elseif analyzers.DisableHttpReq and not logger.LogHttpReq then
        return
    end
end)
end






-------- getgenv().httpget
if getgenv().httpget then
local oldhttpget = clonefunction(getgenv().httpget)

rawset(getgenv(), "httpget", function(...)
    local url = select(1, ...) or "Unknown URL"
    local body = select(2, ...) or "No body"

    if analyzers.DisableHttpReq and logger.LogHttpReq then
        writew("Blocked HTTP Request [ httpget ]")
        if typeof(url) == "table" then
            printTable(url, 7)
            write(body)
            write("\n--------------------------")
        else
            write(url)
            write(body)
            write("\n--------------------------")
        end
        return
    elseif not analyzers.DisableHttpReq and logger.LogHttpReq then
        for _, pattern in ipairs(BlacklistedPatterns) do
            if url:match(pattern) then
                if analyzers.DisableWebhookReq and logger.LogWebhookReq then
                    writew("Blocked BlackListed Request [getgenv]")
                    write(url)
                    write(body)
                    write("\n--------------------------")
                    return
                elseif not analyzers.DisableWebhookReq and logger.LogWebhookReq and not logger.LogHttpReq then
                    writew("Blacklisted Request [getgenv]")
                    write(url)
                    write(body)
                    write("\n--------------------------")
                    return oldhttpget(...)
                elseif not analyzers.DisableWebhookReq and logger.LogWebhookReq and logger.LogHttpReq then
                    writew("Blacklisted Request [getgenv]")
                    write(url)
                    write(body)
                    write("\n--------------------------")
                    return oldhttpget(...)
                elseif not analyzers.DisableWebhookReq and not logger.LogWebhookReq and logger.LogHttpReq then
                    writew("HTTP called [getgenv]")
                    write(url)
                    write(body)
                    write("\n--------------------------")
                    return oldhttpget(...)
                elseif analyzers.DisableWebhookReq and not logger.LogWebhookReq and not logger.LogHttpReq then
                    return
                end
            end
        end
	    writew("HTTP called [ httpget ]")
        if typeof(url) == "table" then
            printTable(url, 7)
            write(body)
            write("\n--------------------------")
        else
            write(url)
            write(body)
            write("\n--------------------------")
        end
        return oldhttpget(...)
    elseif not analyzers.DisableHttpReq and not logger.LogHttpReq then
        for _, pattern in ipairs(BlacklistedPatterns) do
            if url:match(pattern) then
                if analyzers.DisableWebhookReq and logger.LogWebhookReq then
                    writee("Blocked BlackListed Request [getgenv]")
                    write(url)
                    write(body)
                    write("\n--------------------------")
                    return
                elseif not analyzers.DisableWebhookReq and logger.LogWebhookReq and not logger.LogHttpReq then
                    writew("Blacklisted Request called [getgenv]")
                    write(url)
                    write(body)
                    write("\n--------------------------")
                    return oldhttpget(...)
                elseif not analyzers.DisableWebhookReq and not logger.LogWebhookReq and not logger.LogHttpReq then
                    return oldhttpget(...)
                elseif analyzers.DisableWebhookReq and not logger.LogWebhookReq then
                    return
                end
            end
        end
        return oldhttpget(...)
    elseif analyzers.DisableHttpReq and not logger.LogHttpReq then
        return
    end
end)
end





-------- getgenv().WebSocket

local oldWebSocketConnect = getgenv().WebSocket

rawset(getgenv(), "WebSocket", {
    connect = function(url)
        local websocket_url = tostring(url) or "Unknown URL"
        if analyzers.DisableWebSocket and logger.LogWebSocket then
            writew("Blocked WebSocket [getgenv]")
            write(websocket_url)
            return
        elseif not analyzers.DisableWebSocket and logger.LogWebSocket then
            for _, pattern in ipairs(BlacklistedPatterns) do
                if websocket_url:match(pattern) then
                    if analyzers.DisableWebhookReq and logger.LogWebSocket then
                        writew("Blocked BlackListed WebSocket [getgenv]")
                        write(websocket_url)
                        write("\n--------------------------")
                        return
                    elseif not analyzers.DisableWebSocket and logger.LogWebhookReq and not logger.LogWebSocket then
                        writew("Blacklisted WebSocket called [getgenv]")
                        write(websocket_url)
                        write("\n--------------------------")
                        return oldWebSocketConnect.connect(url)
                    elseif not analyzers.DisableWebSocket and logger.LogWebhookReq and logger.LogWebSocket then
                        writew("Blacklisted WebSocket called [getgenv]")
                        write(websocket_url)
                        write("\n--------------------------")
                        return oldWebSocketConnect.connect(url)
                    elseif not analyzers.DisableWebSocket and not logger.LogWebhookReq and logger.LogWebSocket then
                        writew("WebSocket called [getgenv]")
                        write(websocket_url)
                        write("\n--------------------------")
                        return oldWebSocketConnect.connect(url)
                    elseif analyzers.DisableWebSocket and not logger.LogWebhookReq and not logger.LogWebSocket then
                        return
                    end
                end
            end
	    writew("WebSocket called [getgenv]")
        if typeof(url) == "table" then
            printTable(websocket_url, 7)
            write("\n--------------------------")
        else
            printTable(websocket_url, 7)
            write("\n--------------------------")
        end
            return oldWebSocketConnect.connect(url)
        elseif not analyzers.DisableWebSocket and not logger.LogWebSocket then
            for _, pattern in ipairs(BlacklistedPatterns) do
                if websocket_url:match(pattern) then
                    if analyzers.DisableWebSocket and logger.LogWebhookReq then
                        writee("Blocked BlackListed WebSocket [getgenv]")
                        write(websocket_url)
                        write("\n--------------------------")
                        return
                    elseif not analyzers.DisableWebSocket and logger.LogWebhookReq and not logger.LogWebSocket then
                        writew("Blacklisted WebSocket called [getgenv]")
                        write(websocket_url)
                        write("\n--------------------------")
                        return oldWebSocketConnect.connect(url)
                    elseif not analyzers.DisableWebSocket and not logger.LogWebhookReq and not logger.LogWebSocket then
                        return oldWebSocketConnect.connect(url)
                    elseif analyzers.DisableWebSocket and not logger.LogWebhookReq then
                        return
                    end
                end
            end
            return oldWebSocketConnect.connect(url)
        elseif analyzers.DisableWebSocket and not logger.LogWebSocket then
            return
        end
    end
})




-------- getgenv().http_request

local oldhttp_request = clonefunction(getgenv().http_request)

rawset(getgenv(), "http_request", function(argss)
    local url = argss.Url or "Unknown URL"
    local body = argss.Body or "No body\n"
    
    if analyzers.DisableHttpReq and logger.LogHttpReq then
        writew("Blocked HTTP Request [ http_request ]")
        if typeof(url) == "table" then
            printTable(url, 30)
            write(body)
            write("\n--------------------------")
        else
            write(url)
            write(body)
            write("\n--------------------------")
        end
        return
    elseif not analyzers.DisableHttpReq and logger.LogHttpReq then
        for _, pattern in ipairs(BlacklistedPatterns) do
            if url:match(pattern) then
                if analyzers.DisableWebhookReq and logger.LogWebhookReq then
                    writew("Blocked BlackListed Request [getgenv]")
                    write(url)
                    write(body)
                    write("\n--------------------------")
                    return
                elseif not analyzers.DisableWebhookReq and logger.LogWebhookReq and not logger.LogHttpReq then
                    writew("Blacklisted Request [getgenv]")
                    write(url)
                    write(body)
                    write("\n--------------------------")
                    return oldhttp_request(argss)
                elseif not analyzers.DisableWebhookReq and logger.LogWebhookReq and logger.LogHttpReq then
                    writew("Blacklisted Request [getgenv]")
                    write(url)
                    write(body)
                    write("\n--------------------------")
                    return oldhttp_request(argss)
                elseif not analyzers.DisableWebhookReq and not logger.LogWebhookReq and logger.LogHttpReq then
                    writew("HTTP called [getgenv]")
                    write(url)
                    write(body)
                    write("\n--------------------------")
                    return oldhttp_request(argss)
                elseif analyzers.DisableWebhookReq and not logger.LogWebhookReq and not logger.LogHttpReq then
                    return
                end
            end
        end
	    writew("HTTP called [ http_request ]")
        if typeof(url) == "table" then
            printTable(url, 30)
            write(body)
            write("\n--------------------------")
        else
            write(url)
            write(body)
            write("\n--------------------------")
        end
        return oldhttp_request(argss)
    elseif not analyzers.DisableHttpReq and not logger.LogHttpReq then
        for _, pattern in ipairs(BlacklistedPatterns) do
            if url:match(pattern) then
                if analyzers.DisableWebhookReq and logger.LogWebhookReq then
                    writew("Blocked BlackListed Request [getgenv]")
                    write(url)
                    write(body)
                    write("\n--------------------------")
                    return
                elseif not analyzers.DisableWebhookReq and logger.LogWebhookReq and not logger.LogHttpReq then
                    writew("Blacklisted Request called [getgenv]")
                    write(url)
                    write(body)
                    write("\n--------------------------")
                    return oldhttp_request(argss)
                elseif not analyzers.DisableWebhookReq and not logger.LogWebhookReq and not logger.LogHttpReq then
                    return oldhttp_request(argss)
                elseif analyzers.DisableWebhookReq and not logger.LogWebhookReq then
                    return
                end
            end
        end
        return oldhttp_request(argss)
    elseif analyzers.DisableHttpReq and not logger.LogHttpReq then
        return
    end
end)


local function getFullPath(instance)
    if not instance then return "nil" end
    
    local pathParts = {}
    local serviceName = nil

    local function isValidIdentifier(name)
        return name:match("^[%a_][%w_]*$") ~= nil
    end

    local function formatLuaString(name)
        return "[\"" .. name .. "\"]"
    end

    while instance and instance ~= game do
        local parent = instance.Parent
        local name = instance.Name
        
        if name and not isValidIdentifier(name) then
            name = formatLuaString(name)
        end

        table.insert(pathParts, 1, name)
        
        local success, service = pcall(function()
            return game:GetService(instance.ClassName)
        end)
        
        if success and service == instance then
            serviceName = instance.ClassName
            table.remove(pathParts, 1)
            break
        end
        
        instance = parent
    end

    if serviceName then
        table.insert(pathParts, 1, "game:GetService(\"" .. serviceName .. "\")")
    else
        table.insert(pathParts, 1, "game")
    end

    return table.concat(pathParts, "."):gsub("%.%[", "[")
end





-- namecall logging
local blockMethods = {
    "FindFirstChildOfClass", "IsA", "FindFirstChild", "GetChildren", "WaitForChild", "Clone", "ClearAllChildren", "SetAttribute", "GetAttribute", "SetPrimaryPartCFrame", "SetPrimaryPartPosition", "ClearAllChildren", 
    "SetNetworkOwner", "SetParent", "MoveTo", "LookAt", "TweenPosition", "TweenSize", "TweenSizeAndPosition", "Destroy", "Wait", "IsDescendantOf", "GetPropertyChangedSignal", "GetService", "SetStateEnabled", 
    "SetTransparency", "SetColor", "SetMaterial", "SetSurface", "SetAnchored", "SetCFrame", "SetPosition", "SetSize", "SetOrientation", "SetVelocity", "SetRotation", "SetWorldCFrame", "GetPlayerFromCharacter", 
    "GetPlayers", "GetTeams", "GetLeaderboard", "AddItem", "RemoveItem", "DestroyItem", "SetLight", "GetPlayerByUserId", "Play", "Stop", "LoadAnimation", "FindFirstChildWhichIsA", "AdjustWeight", "IsKeyDown", 
    "GetCoreGuiEnabled", "SetCoreGuiEnabled", "IsUserFeatureEnabled", "IsLoaded", "AdjustSpeed", "IsFocused", "GetPlayingAnimationTracks", "GetGuiObjectsAtPosition", "GetTextSize", "CaptureFocus", 
    "GetDescendants", "GetPlatform", "JSONEncode", "JSONDecode", "Create","HttpGet","HttpGetAsync","HttpPost","GetMouseLocation","GetGuiInset","IsClient","GetMouse",
    "FindService","GetUserIdFromNameAsync","SetCore","GetUserThumbnailAsync","Pause","IsAncestorOf"
}

